#!/bin/bash

# AI Content Classifier - Automated Release Script
# Automatically bumps patch version (+1), commits, tags, and releases to WordPress.org SVN

set -e

# Configuration
PLUGIN_SLUG="ai-content-classifier"
GIT_REPO_PATH=$(pwd)
SVN_REPO_PATH="${GIT_REPO_PATH}/${PLUGIN_SLUG}-svn"
SVN_URL="https://plugins.svn.wordpress.org/${PLUGIN_SLUG}"
SVN_USERNAME="mokhaled"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}[RELEASE]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "ai-content-classifier.php" ]; then
    print_error "Must run from plugin root directory"
    exit 1
fi

print_header "üöÄ Starting Automated Release Process"

# Step 1: Get current version and auto-bump patch
CURRENT_VERSION=$(grep "Version:" ai-content-classifier.php | awk '{print $3}')
if [ -z "$CURRENT_VERSION" ]; then
    print_error "Could not determine current plugin version"
    exit 1
fi

# Parse version parts (expecting X.Y.Z format)
IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
MAJOR=${VERSION_PARTS[0]}
MINOR=${VERSION_PARTS[1]}
PATCH=${VERSION_PARTS[2]}

# Auto-bump patch version (+1)
NEW_PATCH=$((PATCH + 1))
NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

print_status "Current version: $CURRENT_VERSION"
print_status "New version: $NEW_VERSION (auto-bumped patch +1)"

# Step 2: Update all version references
print_status "üìù Updating version in all files..."

# Update main plugin file
sed -i.bak "s/Version: $CURRENT_VERSION/Version: $NEW_VERSION/" ai-content-classifier.php
sed -i.bak "s/AICG_VERSION', '$CURRENT_VERSION'/AICG_VERSION', '$NEW_VERSION'/" ai-content-classifier.php

# Update readme.txt
sed -i.bak "s/Stable tag: $CURRENT_VERSION/Stable tag: $NEW_VERSION/" readme.txt

# Update README.md badges
sed -i.bak "s/version-$CURRENT_VERSION-blue/version-$NEW_VERSION-blue/" README.md

# Clean up backup files
rm -f *.bak

print_status "‚úÖ Version updated to $NEW_VERSION in all files"

# Step 3: Commit and tag in Git
print_status "üì¶ Committing to Git repository..."

git add ai-content-classifier.php readme.txt README.md
git commit -m "Release version $NEW_VERSION

- Auto-bumped patch version from $CURRENT_VERSION to $NEW_VERSION
- Updated plugin header, stable tag, and documentation
- Ready for WordPress.org distribution
- Automated release workflow"

# Create Git tag
git tag "v$NEW_VERSION"
git push origin main
git push origin "v$NEW_VERSION"

print_status "‚úÖ Git commit and tag v$NEW_VERSION created and pushed"

# Step 4: Sync to WordPress.org SVN
print_status "üîÑ Syncing to WordPress.org SVN..."

# Ensure SVN repo exists and is up to date
if [ ! -d "$SVN_REPO_PATH" ]; then
    print_status "Checking out SVN repository..."
    svn co $SVN_URL $SVN_REPO_PATH
else
    print_status "Updating SVN repository..."
    cd $SVN_REPO_PATH && svn update && cd $GIT_REPO_PATH
fi

# Files to exclude from SVN (development files)
EXCLUDE_LIST=(
    '.git' '.github' '.claude' '.idea' '.vscode'
    'node_modules' 'vendor' '.gitignore' '.gitattributes'
    'composer.json' 'composer.lock' 'package.json' 'package-lock.json'
    'webpack.config.js' 'gulpfile.js' 'Gruntfile.js'
    '.DS_Store' 'Thumbs.db' '*.log'
    'release-to-wordpress.sh' 'auto-release.sh' 'bump-version.sh'
    'assets-source' 'assets/*.html' 'assets/README-ASSETS.md'
    'README.md' 'CHANGELOG.md' 'CONTRIBUTING.md'
    'GIT-SVN-WORKFLOW.md' 'QUICK-REFERENCE.md'
    'phpunit.xml' 'phpcs.xml' 'tests' 'docs'
    '*.swp' '*.swo' '*.tmp' '*.temp'
    'ai-content-classifier-svn' '*.md'
)

# Build rsync exclude arguments
EXCLUDE_ARGS=""
for item in "${EXCLUDE_LIST[@]}"; do
    EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude=$item"
done

# Sync files to SVN trunk
print_status "Syncing files to SVN trunk..."
rsync -av --delete $EXCLUDE_ARGS $GIT_REPO_PATH/ $SVN_REPO_PATH/trunk/

# Change to SVN directory
cd $SVN_REPO_PATH

# Add any new files to SVN
svn add trunk --force --quiet 2>/dev/null || true

# Remove deleted files from SVN
svn status | grep '^!' | awk '{print $2}' | xargs -r svn remove 2>/dev/null || true

# Step 5: Commit to SVN trunk
print_status "üì§ Committing to SVN trunk..."
svn commit -m "Release version $NEW_VERSION

- Auto-bumped from $CURRENT_VERSION to $NEW_VERSION
- WordPress.org compliant release
- Security hardened codebase
- Complete feature set ready for distribution

Generated by automated release workflow" --username $SVN_USERNAME

# Step 6: Create SVN tag
print_status "üè∑Ô∏è  Creating SVN tag $NEW_VERSION..."
svn cp trunk tags/$NEW_VERSION
svn commit -m "Tag version $NEW_VERSION

Automated release tag creation for WordPress.org distribution" --username $SVN_USERNAME

# Return to original directory
cd $GIT_REPO_PATH

# Step 7: Success summary
print_header "üéâ RELEASE COMPLETE!"
echo ""
print_status "‚úÖ Version bumped: $CURRENT_VERSION ‚Üí $NEW_VERSION"
print_status "‚úÖ Git commit and tag created and pushed"
print_status "‚úÖ SVN trunk updated on WordPress.org"
print_status "‚úÖ SVN tag $NEW_VERSION created"
print_status "‚úÖ Plugin live at: https://wordpress.org/plugins/$PLUGIN_SLUG"
echo ""
print_status "üöÄ Release $NEW_VERSION is now live on WordPress.org!"